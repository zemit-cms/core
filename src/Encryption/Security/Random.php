<?php

declare(strict_types=1);

/**
 * This file is part of the Zemit Framework.
 *
 * (c) Zemit Team <contact@zemit.com>
 *
 * For the full copyright and license information, please view the LICENSE.txt
 * file that was distributed with this source code.
 */

namespace Zemit\Encryption\Security;

use Phalcon\Encryption\Security\Exception;
use Phalcon\Encryption\Security\Random as PhalconRandom;

class Random extends PhalconRandom
{
    /**
     * @see \Phalcon\Encryption\Security\Random::uuid()
     * @return string
     * @throws Exception
     */
    public function uuidv4(): string
    {
        return parent::uuid();
    }

    /**
     * Generates a UUIDv7 (UUID version 7) string based on the Unix timestamp in milliseconds,
     * combined with randomly generated bytes, formatted as a standard UUID string.
     *
     * Uses the Unix timestamp and random bytes to create a unique identifier,
     * sets the appropriate version and variant bits, and returns the UUID in a
     * canonical string format.
     *
     * @return string The generated UUIDv7 string in canonical format (e.g., xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).
     */
    public function uuidv7(): string
    {
        // Get Unix timestamp in milliseconds
        $unix_ms = (int) floor(microtime(true) * 1000.0);

        // Convert to 48-bit integer (6 bytes)
        $time_bytes = pack('J', $unix_ms); // pack as 64-bit unsigned
        $time_bytes = substr($time_bytes, -6); // take the last 6 bytes

        // 10 random bytes (80 bits)
        $rand_bytes = random_bytes(10);

        // Combine into a 16-byte buffer
        $bytes = $time_bytes . $rand_bytes;

        // Set version (bits 48–51)
        $bytes[6] = chr((ord($bytes[6]) & 0x0F) | 0x70);

        // Set variant (bits 64–65)
        $bytes[8] = chr((ord($bytes[8]) & 0x3F) | 0x80);

        // Return canonical UUID string
        $hex = bin2hex($bytes);
        return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split($hex, 4));
    }
}
